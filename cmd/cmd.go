package cmd

import (
	"github.com/goat-project/exporter/service"

	"github.com/goat-project/exporter/constants"
	"github.com/goat-project/exporter/logger"
	"github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

const version = "1.0.0"

var flags = []string{constants.CfgGoatEndpoint, constants.CfgDirectoryPath, constants.CfgPrometheusEndpoint,
	constants.CfgDebug, constants.CfgLogPath} // all flags are required except log-path

var cmd = &cobra.Command{
	Use:   "exporter",
	Short: "exports data found in files to Prometheus",
	Long: "Goat exporter finds files generated by Goat, parses them according to the content and " +
		"exports to the Prometheus.",
	Version: version,
	Run: func(cmd *cobra.Command, args []string) {
		logger.Init()

		checkRequired()
		if viper.GetBool("debug") {
			logrus.WithFields(logrus.Fields{"version": version}).Debug("service version")
			logFlags()
		}

		service.Serve()
	},
}

// Execute uses the args (os.Args[1:] by default)
// and run through the command tree finding appropriate matches
// for commands and then corresponding flags.
func Execute() {
	if err := cmd.Execute(); err != nil {
		logrus.WithFields(logrus.Fields{"error": err}).Fatal("fatal error execute")
	}
}

// Initialize initializes configuration and CLI options.
func Initialize() {
	cobra.OnInitialize(initConfig)

	cmd.PersistentFlags().StringP(constants.CfgGoatEndpoint, "g",
		viper.GetString(constants.CfgGoatEndpoint), "Goat endpoint [GOAT_ENDPOINT] (required)")
	cmd.PersistentFlags().StringP(constants.CfgDirectoryPath, "o",
		viper.GetString(constants.CfgDirectoryPath), "Directory path [PATH] (required)")
	cmd.PersistentFlags().StringP(constants.CfgPrometheusEndpoint, "p",
		viper.GetString(constants.CfgPrometheusEndpoint), "Prometheus endpoint [PROMETHEUS_ENDPOINT] (required)")
	cmd.PersistentFlags().StringP(constants.CfgDebug, "d", viper.GetString(constants.CfgDebug),
		"debug")
	cmd.PersistentFlags().String(constants.CfgLogPath, viper.GetString(constants.CfgLogPath), "path to log file")

	bindFlags(*cmd)

	viper.SetDefault("author", "Lenka Svetlovska")
	viper.SetDefault("license", "apache")
}

func initConfig() {
	// name of config file (without extension)
	viper.SetConfigName("exporter")

	// paths to look for the config file in
	viper.AddConfigPath("config/")
	viper.AddConfigPath("/etc/exporter/")
	viper.AddConfigPath("$HOME/.exporter/")

	// find and read the config file
	err := viper.ReadInConfig()
	if err != nil {
		logrus.WithFields(logrus.Fields{"error": err}).Error("error config file")
	}
}

func checkRequired() {
	for _, req := range flags[:len(flags)-1] { // required flags without the last one (log-path)
		if viper.GetString(req) == "" {
			logrus.WithFields(logrus.Fields{"flag": req}).Fatal("required flag not set")
		}
	}
}

func bindFlags(command cobra.Command) {
	for _, flag := range flags {
		err := viper.BindPFlag(flag, command.PersistentFlags().Lookup(flag))
		if err != nil {
			logrus.WithFields(logrus.Fields{"error": err, "flag": flag}).Panic("unable to initialize flag")
		}
	}
}

func logFlags() {
	for _, flag := range flags {
		logrus.WithFields(logrus.Fields{"flag": flag, "value": viper.Get(flag)}).Debug("flag initialized")
	}
}
